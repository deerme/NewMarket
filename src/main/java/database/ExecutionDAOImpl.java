package database;

import model.Execution;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import javax.sql.DataSource;
import java.sql.PreparedStatement;
import java.util.List;

/**
 * Created by PBanasiak on 3/21/2016.
 */
@Transactional
public class ExecutionDAOImpl implements ExecutionDAO {
    private JdbcTemplate jdbcTemplate;

    public ExecutionDAOImpl(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Transactional(propagation = Propagation.REQUIRED)
    public KeyHolder addExecutionToDatabaseAndReturnAutoGeneratedKey(final int idBuyer, final int idSeller, final int quantity) {
        final String sqlInsertExecutionToDatabase = "INSERT INTO EXECUTION(QUANTITY,ID_ORDER_SELLER,ID_ORDER_BUYER) VALUES(?,?,?);";

        KeyHolder keyHolder = new GeneratedKeyHolder();
        this.jdbcTemplate.update(
                connection -> {
                    PreparedStatement ps =
                            connection.prepareStatement(sqlInsertExecutionToDatabase);
                    ps.setInt(1, quantity);
                    ps.setInt(2, idSeller);
                    ps.setInt(3, idBuyer);

                    return ps;
                },
                keyHolder);
        return keyHolder;
    }

    public List<Execution> getAllExecutions(){
        return  this.jdbcTemplate.query("SELECT * FROM EXECUTION",
                (rs, rowNum) -> new Execution(rs.getInt("id_order_buyer"),rs.getInt("id_order_seller"),rs.getInt("id"),rs.getInt("quantity")));
    }
}
